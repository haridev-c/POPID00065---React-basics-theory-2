Hooks allow function components to have access to state and other React features. Because of this, class components are generally no longer needed.

Hooks allow us to "hook" into React features such as state and lifecycle methods.

There are 3 rules for hooks:

Hooks can only be called inside React function components.
Hooks can only be called at the top level of a component.
Hooks cannot be conditional

Various Hooks used are:
	useState Hook
	The React useState Hook allows us to track state in a function component.
	State generally refers to data or properties that need to be tracking in an application.

	useEffect Hooks
	The useEffect Hook allows you to perform side effects in your components.
	Some examples of side effects are: fetching data, directly updating the DOM, and timers.
	useEffect accepts two arguments. The second argument is optional.
	useEffect(<function>, <dependency>)
	useEffect runs on every render. That means that when the count changes, a render happens, which then triggers another effect.

	useContext Hook
	React Context is a way to manage state globally.
	It can be used together with the useState Hook to share state between deeply nested components more easily than with useState 	alone.

	useRef Hook
	The useRef Hook allows you to persist values between renders.
	It can be used to store a mutable value that does not cause a re-render when updated.
	It can be used to access a DOM element directly.
	If we tried to count how many times our application renders using the useState Hook, we would be caught in an infinite loop 	since this Hook itself causes a re-render.
	To avoid this, we can use the useRef Hook
	useRef() only returns one item. It returns an Object called current.
	When we initialize useRef we set the initial value: useRef(0).

	useReducer Hook
	The useReducer Hook is similar to the useState Hook.
	It allows for custom state logic.
	If you find yourself keeping track of multiple pieces of state that rely on complex logic, useReducer may be useful.
	The reducer function contains your custom state logic and the initialStatecan be a simple value but generally will contain an 	object.
	The useReducer Hook returns the current stateand a dispatchmethod.

	useMemo Hook
	The React useMemo Hook returns a memoized value.
	Think of memoization as caching a value so that it does not need to be recalculated.
	The useMemo Hook only runs when one of its dependencies update.
	This can improve performance.
	The useMemo and useCallback Hooks are similar. The main difference is that useMemo returns a memoized value and useCallback 	returns a memoized function. You can learn more about useCallback in the useCallback chapter.